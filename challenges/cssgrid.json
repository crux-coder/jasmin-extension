[
  {
    "section": "Css Grid",
    "name": "Create Your First Css Grid",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-your-first-css-grid",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Turn any HTML element into a grid container by setting its <code>display</code> property to <code>grid</code>. This gives you the ability to use all the other properties associated with CSS Grid.</p>\n<p><strong>Note:</strong> In CSS Grid, the parent element is referred to as the <dfn>container</dfn> and its children are called <dfn>items</dfn>.</p>\n",
    "instructions": "\n<p>Change the display of the div with the <code>container</code> class to <code>grid</code>.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Add Columns With Grid Template Columns",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/add-columns-with-grid-template-columns",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Simply creating a grid element doesn't get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the <code>grid-template-columns</code> property on a grid container as demonstrated below:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 50px 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This will give your grid two columns that are each 50px wide. The number of parameters given to the <code>grid-template-columns</code> property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.</p>\n",
    "instructions": "\n<p>Give the grid container three columns that are each <code>100px</code> wide.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Add Rows With Grid Template Rows",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/add-rows-with-grid-template-rows",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>The grid you created in the last challenge will set the number of rows automatically. To adjust the rows manually, use the <code>grid-template-rows</code> property in the same way you used <code>grid-template-columns</code> in the previous challenge.</p>\n",
    "instructions": "\n<p>Add two rows to the grid that are <code>50px</code> tall each.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Use Css Grid Units To Change The Size Of Columns And Rows",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/use-css-grid-units-to-change-the-size-of-columns-and-rows",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>You can use absolute and relative units like <code>px</code> and <code>em</code> in CSS Grid to define the size of rows and columns. You can use these as well:</p>\n<p><code>fr</code>: sets the column or row to a fraction of the available space,</p>\n<p><code>auto</code>: sets the column or row to the width or height of its content automatically,</p>\n<p><code>%</code>: adjusts the column or row to the percent width of its container.</p>\n<p>Here's the code that generates the output in the preview:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> auto 50px 10% 2fr 1fr<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.</p>\n",
    "instructions": "\n<p>Make a grid with three columns whose widths are as follows: 1fr, 100px, and 2fr.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Create A Column Gap Using Grid Column Gap",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-a-column-gap-using-grid-column-gap",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>So far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a gap in between the columns. To add a gap between the columns, use the <code>grid-column-gap</code> property like this:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-column-gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This creates 10px of empty space between all of our columns.</p>\n",
    "instructions": "\n<p>Give the columns in the grid a <code>20px</code> gap.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Create A Row Gap Using Grid Row Gap",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-a-row-gap-using-grid-row-gap",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>You can add a gap in between the rows of a grid using <code>grid-row-gap</code> in the same way that you added a gap in between columns in the previous challenge.</p>\n",
    "instructions": "\n<p>Create a gap for the rows that is <code>5px</code> tall.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Add Gaps Faster With Grid Gap",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/add-gaps-faster-with-grid-gap",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p><code>grid-gap</code> is a shorthand property for <code>grid-row-gap</code> and <code>grid-column-gap</code> from the previous two challenges that's more convenient to use. If <code>grid-gap</code> has one value, it will create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.</p>\n",
    "instructions": "\n<p>Use <code>grid-gap</code> to introduce a <code>10px</code> gap between the rows and <code>20px</code> gap between the columns.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Use Grid Column To Control Spacing",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/use-grid-column-to-control-spacing",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Up to this point, all the properties that have been discussed are for grid containers. The <code>grid-column</code> property is the first one for use on the grid items themselves.</p>\n<p>The hypothetical horizontal and vertical lines that create the grid are referred to as <dfn>lines</dfn>. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.</p>\n<p>This is what the lines look like for a 3x3 grid:</p>\n<div style=\"position:relative;margin:auto;background:Gainsboro;display:block;margin-top:100px;margin-bottom:50px;width:200px;height:200px;\"><p style=\"left:25%;top:-30%;font-size:130%;position:absolute;color:RoyalBlue;\">column lines</p><p style=\"left:0%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">1</p><p style=\"left:30%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">2</p><p style=\"left:63%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">3</p><p style=\"left:95%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">4</p><p style=\"left:-40%;top:45%;font-size:130%;transform:rotateZ(-90deg);position:absolute;\">row lines</p><p style=\"left:-10%;top:-10%;font-size:130%;position:absolute;\">1</p><p style=\"left:-10%;top:21%;font-size:130%;position:absolute;\">2</p><p style=\"left:-10%;top:53%;font-size:130%;position:absolute;\">3</p><p style=\"left:-10%;top:85%;font-size:130%;position:absolute;\">4</p><div style=\"left:0%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:31%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:63%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:95%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:0%;top:0%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:31%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:63%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:95%;width:100%;height:5%;background:black;position:absolute;\"></div></div>\n<p>To control the number of columns an item will consume, you can use the <code>grid-column</code> property in conjunction with the line numbers you want the item to start and stop at.</p>\n<p>Here's an example:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 1 / 3<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.</p>\n",
    "instructions": "\n<p>Make the item with the class <code>item5</code> consume the last two columns of the grid.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Use Grid Row To Control Spacing",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/use-grid-row-to-control-spacing",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Of course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the <code>grid-row</code> property on a grid item.</p>\n",
    "instructions": "\n<p>Make the element with the <code>item5</code> class consume the last two rows.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Align An Item Horizontally Using Justify Self",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/align-an-item-horizontally-using-justify-self",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>In CSS Grid, the content of each item is located in a box which is referred to as a <dfn>cell</dfn>. You can align the content's position within its cell horizontally using the <code>justify-self</code> property on a grid item. By default, this property has a value of <code>stretch</code>, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well:</p>\n<p><code>start</code>: aligns the content at the left of the cell,</p>\n<p><code>center</code>: aligns the content in the center of the cell,</p>\n<p><code>end</code>: aligns the content at the right of the cell.</p>\n",
    "instructions": "\n<p>Use the <code>justify-self</code> property to center the item with the class <code>item2</code>.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Align An Item Vertically Using Align Self",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/align-an-item-vertically-using-align-self",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the <code>align-self</code> property on an item. This property accepts all of the same values as <code>justify-self</code> from the last challenge.</p>\n",
    "instructions": "\n<p>Align the item with the class <code>item3</code> vertically at the <code>end</code>.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Align All Items Horizontally Using Justify Items",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/align-all-items-horizontally-using-justify-items",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Sometimes you want all the items in your CSS Grid to share the same alignment. You can use the previously learned properties and align them individually, or you can align them all at once horizontally by using <code>justify-items</code> on your grid container. This property can accept all the same values you learned about in the previous two challenges, the difference being that it will move <strong>all</strong> the items in our grid to the desired alignment.</p>\n",
    "instructions": "\n<p>Use this property to center all our items horizontally.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Align All Items Vertically Using Align Items",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/align-all-items-vertically-using-align-items",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Using the <code>align-items</code> property on a grid container will set the vertical alignment for all the items in our grid.</p>\n",
    "instructions": "\n<p>Use it now to move all the items to the end of each cell.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Divide The Grid Into An Area Template",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/divide-the-grid-into-an-area-template",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>You can group cells of your grid together into an <dfn>area</dfn> and give the area a custom name. Do this by using <code>grid-template-areas</code> on the container like this:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span>\n  <span class=\"token string\">\"header header header\"</span>\n  <span class=\"token string\">\"advert content content\"</span>\n  <span class=\"token string\">\"advert footer footer\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The code above groups the cells of the grid into four areas; <code>header</code>, <code>advert</code>, <code>content</code>, and <code>footer</code>. Every word represents a cell and every pair of quotation marks represent a row.</p>\n",
    "instructions": "\n<p>Change the template so the <code>footer</code> area spans the entire bottom row. Defining the areas won't have any visual effect right now. Later, you will make an item use an area to see how it works.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Place Items In Grid Areas Using The Grid Area Property",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/place-items-in-grid-areas-using-the-grid-area-property",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>After creating an area template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it. To do this, you use the <code>grid-area</code> property on an item like this:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.item1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> header<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This lets the grid know that you want the <code>item1</code> class to go in the area named <code>header</code>. In this case, the item will use the entire top row because that whole row is named as the header area.</p>\n",
    "instructions": "\n<p>Place an element with the <code>item5</code> class in the <code>footer</code> area using the <code>grid-area</code> property.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Use Grid Area Without Creating An Areas Template",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/use-grid-area-without-creating-an-areas-template",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>The <code>grid-area</code> property you learned in the last challenge can be used in another way. If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">item1</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> 1/1/2/4<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This is using the line numbers you learned about earlier to define where the area for this item will be. The numbers in the example above represent these values:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>So the item in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4.</p>\n",
    "instructions": "\n<p>Using the <code>grid-area</code> property, place the element with <code>item5</code> class between the third and fourth horizontal lines and between the first and fourth vertical lines.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Reduce Repetition Using The Repeat Function",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/reduce-repetition-using-the-repeat-function",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>When you used <code>grid-template-columns</code> and <code>grid-template-rows</code> to define the structure of a grid, you entered a value for each row or column you created.</p>\n<p>Let's say you want a grid with 100 rows of the same height. It isn't very practical to insert 100 values individually. Fortunately, there's a better way - by using the <code>repeat</code> function to specify the number of times you want your column or row to be repeated, followed by a comma and the value you want to repeat.</p>\n<p>Here's an example that would create the 100 row grid, each row at 50px tall.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>100<span class=\"token punctuation\">,</span> 50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>You can also repeat multiple values with the repeat function and insert the function amongst other values when defining a grid structure. Here's what that looks like:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span> 1fr 50px<span class=\"token punctuation\">)</span> 20px<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This translates to:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 1fr 50px 1fr 50px 20px<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>Note:</strong> The <code>1fr 50px</code> is repeated twice followed by 20px.</p>\n",
    "instructions": "\n<p>Use <code>repeat</code> to remove repetition from the <code>grid-template-columns</code> property.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Limit Item Size Using The Minmax Function",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/limit-item-size-using-the-minmax-function",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>There's another built-in function to use with <code>grid-template-columns</code> and <code>grid-template-rows</code> called <code>minmax</code>. It's used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span> 200px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>In the code above, <code>grid-template-columns</code> is set to create two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.</p>\n",
    "instructions": "\n<p>Using the <code>minmax</code> function, replace the <code>1fr</code> in the <code>repeat</code> function with a column size that has the minimum width of <code>90px</code> and the maximum width of <code>1fr</code>, and resize the preview panel to see the effect.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Create Flexible Layouts Using Auto Fill",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-flexible-layouts-using-auto-fill",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>The repeat function comes with an option called <dfn>auto-fill</dfn>. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining <code>auto-fill</code> with <code>minmax</code>, like this:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>auto-fill<span class=\"token punctuation\">,</span> <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>60px<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>When the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one. <strong>Note:</strong> If your container can't fit all your items on one row, it will move them down to a new one.</p>\n",
    "instructions": "\n<p>In the first grid, use <code>auto-fill</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>. Then resize the preview to see auto-fill in action.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Create Flexible Layouts Using Auto Fit",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-flexible-layouts-using-auto-fit",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p><code>auto-fit</code> works almost identically to <code>auto-fill</code>. The only difference is that when the container's size exceeds the size of all the items combined, <code>auto-fill</code> keeps inserting empty rows or columns and pushes your items to the side, while <code>auto-fit</code> collapses those empty rows or columns and stretches your items to fit the size of the container.</p>\n<p><strong>Note:</strong> If your container can't fit all your items on one row, it will move them down to a new one.</p>\n",
    "instructions": "\n<p>In the second grid, use <code>auto-fit</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>. Then resize the preview to see the difference.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Use Media Queries To Create Responsive Layouts",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/use-media-queries-to-create-responsive-layouts",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.</p>\n<p>In the preview, when the viewport width is 300px or more, the number of columns changes from 1 to 2. The advertisement area then occupies the left column completely.</p>\n",
    "instructions": "\n<p>When the viewport width is <code>400px</code> or more, make the header area occupy the top row completely and the footer area occupy the bottom row completely.</p>\n"
  },
  {
    "section": "Css Grid",
    "name": "Create Grids Within Grids",
    "url": "https://www.freecodecamp.org/learn/responsive-web-design/css-grid/create-grids-within-grids",
    "remove": ["ALL_HELPERS"],
    "description": "\n<p>Turning an element into a grid only affects the behavior of its direct descendants. So by turning a direct descendant into a grid, you have a grid within a grid.</p>\n<p>For example, by setting the <code>display</code> and <code>grid-template-columns</code> properties of the element with the <code>item3</code> class, you create a grid within your grid.</p>\n",
    "instructions": "\n<p>Turn the element with the <code>item3</code> class into a grid with two columns with a width of <code>auto</code> and <code>1fr</code> using <code>display</code> and <code>grid-template-columns</code>.</p>\n"
  }
]
